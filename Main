import RPi.GPIO as GPIO
import time
GPIO.setwarnings(False)
#GPIO.cleanup()
TRIG = 23 #Variable que contiene el GPIO al cual conectamos la señal TRIG del sensor
ECHO = 24 #Variable que contiene el GPIO al cual conectamos la señal ECHO del sensor
Led_verde = 17 #Variable que contiene el GPIO al cual conectamos el led verde.
Alarma = 27 #Variable que contiene el GPIO al cual conectamos el buzzer.
Led_rojo = 22 #Variable que contiene el GPIO al cual conectamos el led rojo.

GPIO.setmode(GPIO.BCM)     #Establecemos el modo según el cual nos refiriremos a los GPIO de nuestra RPi            
GPIO.setup(TRIG, GPIO.OUT) #Configuramos el pin TRIG como una salida 
GPIO.setup(ECHO, GPIO.IN)  #Configuramos el pin ECHO como una salida 
GPIO.setup(Led_verde, GPIO.OUT) #Configuramos el pin Led_verde como una salida 
GPIO.setup(Alarma, GPIO.OUT)  #Configuramos el pin Alarma como una salida
GPIO.setup(Led_rojo, GPIO.OUT) #Configuramos el pin Led_rojo como una salida 


try:
    #Implementamos un loop infinito
    while True:

        # Ponemos en bajo el pin TRIG y después esperamos 0.5 seg para que el transductor se estabilice
        GPIO.output(TRIG, GPIO.LOW)
        time.sleep(0.5)

        #Ponemos en alto el pin TRIG esperamos 10 uS antes de ponerlo en bajo
        GPIO.output(TRIG, GPIO.HIGH)
        time.sleep(0.00001)
        GPIO.output(TRIG, GPIO.LOW)

        # En este momento el sensor envía 8 pulsos ultrasónicos de 40kHz y coloca su pin ECHO en alto
        # Debemos detectar dicho evento para iniciar la medición del tiempo
        
        while True:
            pulso_inicio = time.time()
            if GPIO.input(ECHO) == GPIO.HIGH:
                break

        # El pin ECHO se mantendrá en HIGH hasta recibir el eco rebotado por el obstáculo. 
        # En ese momento el sensor pondrá el pin ECHO en bajo.
        
        # Prodedemos a detectar dicho evento para terminar la medición del tiempo     
        while True:
            pulso_fin = time.time()
            if GPIO.input(ECHO) == GPIO.LOW:
                break

        # Tiempo medido en segundos
        duracion = pulso_fin - pulso_inicio
        
        #Obtenemos la distancia considerando que la señal recorre dos veces la distancia a medir y que la velocidad del sonido es 343m/s
        distancia = (17150 * duracion)

        # Imprimimos resultado
        print( "Distancia: %.2f cm" % distancia)
        
        if 0.1 < distancia < 25.00:
            print("Luz roja encendida")
            GPIO.output(Led_rojo, GPIO.HIGH)
            GPIO.output(Alarma, GPIO.LOW)
            GPIO.output(Led_verde, GPIO.LOW)
        
        elif 25.01 < distancia <50.00:
            print("Alarma encendida")
            GPIO.output(Led_rojo, GPIO.LOW)
            GPIO.output(Alarma, GPIO.HIGH)
            GPIO.output(Led_verde, GPIO.LOW)
        else:
            print("Luz verde encendida")
            GPIO.output(Led_rojo, GPIO.LOW)
            GPIO.output(Alarma, GPIO.LOW)
            GPIO.output(Led_verde, GPIO.HIGH)
        
       
finally:
    # Reiniciamos todos los canales de GPIO.
    GPIO.cleanup()
